//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace SilverlightTest.motorService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="motorService.IMotorService")]
    public interface IMotorService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMotorService/setMotorData", ReplyAction="http://tempuri.org/IMotorService/setMotorDataResponse")]
        System.IAsyncResult BeginsetMotorData(System.Collections.ObjectModel.ObservableCollection<int> data, System.AsyncCallback callback, object asyncState);
        
        int EndsetMotorData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMotorService/motorCommand", ReplyAction="http://tempuri.org/IMotorService/motorCommandResponse")]
        System.IAsyncResult BeginmotorCommand(string command, int velocity, int degrees, System.AsyncCallback callback, object asyncState);
        
        bool EndmotorCommand(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMotorService/setSerialNum", ReplyAction="http://tempuri.org/IMotorService/setSerialNumResponse")]
        System.IAsyncResult BeginsetSerialNum(int l, int r, System.AsyncCallback callback, object asyncState);
        
        bool EndsetSerialNum(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMotorService/getBearing", ReplyAction="http://tempuri.org/IMotorService/getBearingResponse")]
        System.IAsyncResult BegingetBearing(System.AsyncCallback callback, object asyncState);
        
        double EndgetBearing(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMotorServiceChannel : SilverlightTest.motorService.IMotorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class setMotorDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public setMotorDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class motorCommandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public motorCommandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class setSerialNumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public setSerialNumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getBearingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getBearingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MotorServiceClient : System.ServiceModel.ClientBase<SilverlightTest.motorService.IMotorService>, SilverlightTest.motorService.IMotorService {
        
        private BeginOperationDelegate onBeginsetMotorDataDelegate;
        
        private EndOperationDelegate onEndsetMotorDataDelegate;
        
        private System.Threading.SendOrPostCallback onsetMotorDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginmotorCommandDelegate;
        
        private EndOperationDelegate onEndmotorCommandDelegate;
        
        private System.Threading.SendOrPostCallback onmotorCommandCompletedDelegate;
        
        private BeginOperationDelegate onBeginsetSerialNumDelegate;
        
        private EndOperationDelegate onEndsetSerialNumDelegate;
        
        private System.Threading.SendOrPostCallback onsetSerialNumCompletedDelegate;
        
        private BeginOperationDelegate onBegingetBearingDelegate;
        
        private EndOperationDelegate onEndgetBearingDelegate;
        
        private System.Threading.SendOrPostCallback ongetBearingCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MotorServiceClient() {
        }
        
        public MotorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MotorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MotorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MotorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<setMotorDataCompletedEventArgs> setMotorDataCompleted;
        
        public event System.EventHandler<motorCommandCompletedEventArgs> motorCommandCompleted;
        
        public event System.EventHandler<setSerialNumCompletedEventArgs> setSerialNumCompleted;
        
        public event System.EventHandler<getBearingCompletedEventArgs> getBearingCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightTest.motorService.IMotorService.BeginsetMotorData(System.Collections.ObjectModel.ObservableCollection<int> data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsetMotorData(data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SilverlightTest.motorService.IMotorService.EndsetMotorData(System.IAsyncResult result) {
            return base.Channel.EndsetMotorData(result);
        }
        
        private System.IAsyncResult OnBeginsetMotorData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<int> data = ((System.Collections.ObjectModel.ObservableCollection<int>)(inValues[0]));
            return ((SilverlightTest.motorService.IMotorService)(this)).BeginsetMotorData(data, callback, asyncState);
        }
        
        private object[] OnEndsetMotorData(System.IAsyncResult result) {
            int retVal = ((SilverlightTest.motorService.IMotorService)(this)).EndsetMotorData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsetMotorDataCompleted(object state) {
            if ((this.setMotorDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.setMotorDataCompleted(this, new setMotorDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void setMotorDataAsync(System.Collections.ObjectModel.ObservableCollection<int> data) {
            this.setMotorDataAsync(data, null);
        }
        
        public void setMotorDataAsync(System.Collections.ObjectModel.ObservableCollection<int> data, object userState) {
            if ((this.onBeginsetMotorDataDelegate == null)) {
                this.onBeginsetMotorDataDelegate = new BeginOperationDelegate(this.OnBeginsetMotorData);
            }
            if ((this.onEndsetMotorDataDelegate == null)) {
                this.onEndsetMotorDataDelegate = new EndOperationDelegate(this.OnEndsetMotorData);
            }
            if ((this.onsetMotorDataCompletedDelegate == null)) {
                this.onsetMotorDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsetMotorDataCompleted);
            }
            base.InvokeAsync(this.onBeginsetMotorDataDelegate, new object[] {
                        data}, this.onEndsetMotorDataDelegate, this.onsetMotorDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightTest.motorService.IMotorService.BeginmotorCommand(string command, int velocity, int degrees, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginmotorCommand(command, velocity, degrees, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightTest.motorService.IMotorService.EndmotorCommand(System.IAsyncResult result) {
            return base.Channel.EndmotorCommand(result);
        }
        
        private System.IAsyncResult OnBeginmotorCommand(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string command = ((string)(inValues[0]));
            int velocity = ((int)(inValues[1]));
            int degrees = ((int)(inValues[2]));
            return ((SilverlightTest.motorService.IMotorService)(this)).BeginmotorCommand(command, velocity, degrees, callback, asyncState);
        }
        
        private object[] OnEndmotorCommand(System.IAsyncResult result) {
            bool retVal = ((SilverlightTest.motorService.IMotorService)(this)).EndmotorCommand(result);
            return new object[] {
                    retVal};
        }
        
        private void OnmotorCommandCompleted(object state) {
            if ((this.motorCommandCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.motorCommandCompleted(this, new motorCommandCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void motorCommandAsync(string command, int velocity, int degrees) {
            this.motorCommandAsync(command, velocity, degrees, null);
        }
        
        public void motorCommandAsync(string command, int velocity, int degrees, object userState) {
            if ((this.onBeginmotorCommandDelegate == null)) {
                this.onBeginmotorCommandDelegate = new BeginOperationDelegate(this.OnBeginmotorCommand);
            }
            if ((this.onEndmotorCommandDelegate == null)) {
                this.onEndmotorCommandDelegate = new EndOperationDelegate(this.OnEndmotorCommand);
            }
            if ((this.onmotorCommandCompletedDelegate == null)) {
                this.onmotorCommandCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnmotorCommandCompleted);
            }
            base.InvokeAsync(this.onBeginmotorCommandDelegate, new object[] {
                        command,
                        velocity,
                        degrees}, this.onEndmotorCommandDelegate, this.onmotorCommandCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightTest.motorService.IMotorService.BeginsetSerialNum(int l, int r, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsetSerialNum(l, r, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightTest.motorService.IMotorService.EndsetSerialNum(System.IAsyncResult result) {
            return base.Channel.EndsetSerialNum(result);
        }
        
        private System.IAsyncResult OnBeginsetSerialNum(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int l = ((int)(inValues[0]));
            int r = ((int)(inValues[1]));
            return ((SilverlightTest.motorService.IMotorService)(this)).BeginsetSerialNum(l, r, callback, asyncState);
        }
        
        private object[] OnEndsetSerialNum(System.IAsyncResult result) {
            bool retVal = ((SilverlightTest.motorService.IMotorService)(this)).EndsetSerialNum(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsetSerialNumCompleted(object state) {
            if ((this.setSerialNumCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.setSerialNumCompleted(this, new setSerialNumCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void setSerialNumAsync(int l, int r) {
            this.setSerialNumAsync(l, r, null);
        }
        
        public void setSerialNumAsync(int l, int r, object userState) {
            if ((this.onBeginsetSerialNumDelegate == null)) {
                this.onBeginsetSerialNumDelegate = new BeginOperationDelegate(this.OnBeginsetSerialNum);
            }
            if ((this.onEndsetSerialNumDelegate == null)) {
                this.onEndsetSerialNumDelegate = new EndOperationDelegate(this.OnEndsetSerialNum);
            }
            if ((this.onsetSerialNumCompletedDelegate == null)) {
                this.onsetSerialNumCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsetSerialNumCompleted);
            }
            base.InvokeAsync(this.onBeginsetSerialNumDelegate, new object[] {
                        l,
                        r}, this.onEndsetSerialNumDelegate, this.onsetSerialNumCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightTest.motorService.IMotorService.BegingetBearing(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetBearing(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        double SilverlightTest.motorService.IMotorService.EndgetBearing(System.IAsyncResult result) {
            return base.Channel.EndgetBearing(result);
        }
        
        private System.IAsyncResult OnBegingetBearing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightTest.motorService.IMotorService)(this)).BegingetBearing(callback, asyncState);
        }
        
        private object[] OnEndgetBearing(System.IAsyncResult result) {
            double retVal = ((SilverlightTest.motorService.IMotorService)(this)).EndgetBearing(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetBearingCompleted(object state) {
            if ((this.getBearingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getBearingCompleted(this, new getBearingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getBearingAsync() {
            this.getBearingAsync(null);
        }
        
        public void getBearingAsync(object userState) {
            if ((this.onBegingetBearingDelegate == null)) {
                this.onBegingetBearingDelegate = new BeginOperationDelegate(this.OnBegingetBearing);
            }
            if ((this.onEndgetBearingDelegate == null)) {
                this.onEndgetBearingDelegate = new EndOperationDelegate(this.OnEndgetBearing);
            }
            if ((this.ongetBearingCompletedDelegate == null)) {
                this.ongetBearingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetBearingCompleted);
            }
            base.InvokeAsync(this.onBegingetBearingDelegate, null, this.onEndgetBearingDelegate, this.ongetBearingCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightTest.motorService.IMotorService CreateChannel() {
            return new MotorServiceClientChannel(this);
        }
        
        private class MotorServiceClientChannel : ChannelBase<SilverlightTest.motorService.IMotorService>, SilverlightTest.motorService.IMotorService {
            
            public MotorServiceClientChannel(System.ServiceModel.ClientBase<SilverlightTest.motorService.IMotorService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginsetMotorData(System.Collections.ObjectModel.ObservableCollection<int> data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = data;
                System.IAsyncResult _result = base.BeginInvoke("setMotorData", _args, callback, asyncState);
                return _result;
            }
            
            public int EndsetMotorData(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("setMotorData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginmotorCommand(string command, int velocity, int degrees, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = command;
                _args[1] = velocity;
                _args[2] = degrees;
                System.IAsyncResult _result = base.BeginInvoke("motorCommand", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndmotorCommand(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("motorCommand", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginsetSerialNum(int l, int r, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = l;
                _args[1] = r;
                System.IAsyncResult _result = base.BeginInvoke("setSerialNum", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndsetSerialNum(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("setSerialNum", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetBearing(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("getBearing", _args, callback, asyncState);
                return _result;
            }
            
            public double EndgetBearing(System.IAsyncResult result) {
                object[] _args = new object[0];
                double _result = ((double)(base.EndInvoke("getBearing", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="motorService.IPolicyRetriever")]
    public interface IPolicyRetriever {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPolicyRetriever/GetSilverlightPolicy", ReplyAction="http://tempuri.org/IPolicyRetriever/GetSilverlightPolicyResponse")]
        System.IAsyncResult BeginGetSilverlightPolicy(System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetSilverlightPolicy(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPolicyRetriever/GetFlashPolicy", ReplyAction="http://tempuri.org/IPolicyRetriever/GetFlashPolicyResponse")]
        System.IAsyncResult BeginGetFlashPolicy(System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetFlashPolicy(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPolicyRetrieverChannel : SilverlightTest.motorService.IPolicyRetriever, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSilverlightPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSilverlightPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFlashPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFlashPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PolicyRetrieverClient : System.ServiceModel.ClientBase<SilverlightTest.motorService.IPolicyRetriever>, SilverlightTest.motorService.IPolicyRetriever {
        
        private BeginOperationDelegate onBeginGetSilverlightPolicyDelegate;
        
        private EndOperationDelegate onEndGetSilverlightPolicyDelegate;
        
        private System.Threading.SendOrPostCallback onGetSilverlightPolicyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFlashPolicyDelegate;
        
        private EndOperationDelegate onEndGetFlashPolicyDelegate;
        
        private System.Threading.SendOrPostCallback onGetFlashPolicyCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PolicyRetrieverClient() {
        }
        
        public PolicyRetrieverClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PolicyRetrieverClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PolicyRetrieverClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PolicyRetrieverClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetSilverlightPolicyCompletedEventArgs> GetSilverlightPolicyCompleted;
        
        public event System.EventHandler<GetFlashPolicyCompletedEventArgs> GetFlashPolicyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightTest.motorService.IPolicyRetriever.BeginGetSilverlightPolicy(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSilverlightPolicy(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] SilverlightTest.motorService.IPolicyRetriever.EndGetSilverlightPolicy(System.IAsyncResult result) {
            return base.Channel.EndGetSilverlightPolicy(result);
        }
        
        private System.IAsyncResult OnBeginGetSilverlightPolicy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightTest.motorService.IPolicyRetriever)(this)).BeginGetSilverlightPolicy(callback, asyncState);
        }
        
        private object[] OnEndGetSilverlightPolicy(System.IAsyncResult result) {
            byte[] retVal = ((SilverlightTest.motorService.IPolicyRetriever)(this)).EndGetSilverlightPolicy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSilverlightPolicyCompleted(object state) {
            if ((this.GetSilverlightPolicyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSilverlightPolicyCompleted(this, new GetSilverlightPolicyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSilverlightPolicyAsync() {
            this.GetSilverlightPolicyAsync(null);
        }
        
        public void GetSilverlightPolicyAsync(object userState) {
            if ((this.onBeginGetSilverlightPolicyDelegate == null)) {
                this.onBeginGetSilverlightPolicyDelegate = new BeginOperationDelegate(this.OnBeginGetSilverlightPolicy);
            }
            if ((this.onEndGetSilverlightPolicyDelegate == null)) {
                this.onEndGetSilverlightPolicyDelegate = new EndOperationDelegate(this.OnEndGetSilverlightPolicy);
            }
            if ((this.onGetSilverlightPolicyCompletedDelegate == null)) {
                this.onGetSilverlightPolicyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSilverlightPolicyCompleted);
            }
            base.InvokeAsync(this.onBeginGetSilverlightPolicyDelegate, null, this.onEndGetSilverlightPolicyDelegate, this.onGetSilverlightPolicyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightTest.motorService.IPolicyRetriever.BeginGetFlashPolicy(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFlashPolicy(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] SilverlightTest.motorService.IPolicyRetriever.EndGetFlashPolicy(System.IAsyncResult result) {
            return base.Channel.EndGetFlashPolicy(result);
        }
        
        private System.IAsyncResult OnBeginGetFlashPolicy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightTest.motorService.IPolicyRetriever)(this)).BeginGetFlashPolicy(callback, asyncState);
        }
        
        private object[] OnEndGetFlashPolicy(System.IAsyncResult result) {
            byte[] retVal = ((SilverlightTest.motorService.IPolicyRetriever)(this)).EndGetFlashPolicy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFlashPolicyCompleted(object state) {
            if ((this.GetFlashPolicyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFlashPolicyCompleted(this, new GetFlashPolicyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFlashPolicyAsync() {
            this.GetFlashPolicyAsync(null);
        }
        
        public void GetFlashPolicyAsync(object userState) {
            if ((this.onBeginGetFlashPolicyDelegate == null)) {
                this.onBeginGetFlashPolicyDelegate = new BeginOperationDelegate(this.OnBeginGetFlashPolicy);
            }
            if ((this.onEndGetFlashPolicyDelegate == null)) {
                this.onEndGetFlashPolicyDelegate = new EndOperationDelegate(this.OnEndGetFlashPolicy);
            }
            if ((this.onGetFlashPolicyCompletedDelegate == null)) {
                this.onGetFlashPolicyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFlashPolicyCompleted);
            }
            base.InvokeAsync(this.onBeginGetFlashPolicyDelegate, null, this.onEndGetFlashPolicyDelegate, this.onGetFlashPolicyCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightTest.motorService.IPolicyRetriever CreateChannel() {
            return new PolicyRetrieverClientChannel(this);
        }
        
        private class PolicyRetrieverClientChannel : ChannelBase<SilverlightTest.motorService.IPolicyRetriever>, SilverlightTest.motorService.IPolicyRetriever {
            
            public PolicyRetrieverClientChannel(System.ServiceModel.ClientBase<SilverlightTest.motorService.IPolicyRetriever> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetSilverlightPolicy(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetSilverlightPolicy", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetSilverlightPolicy(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetSilverlightPolicy", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFlashPolicy(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetFlashPolicy", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetFlashPolicy(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetFlashPolicy", _args, result)));
                return _result;
            }
        }
    }
}
